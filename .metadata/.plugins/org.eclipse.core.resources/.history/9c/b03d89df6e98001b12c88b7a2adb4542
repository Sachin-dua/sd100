package com.itc;

import com.tcs.TCS;
import com.tcs.Test89;

public class InterfaceConcept {

	public static void main(String[] args) {
		

	}

}

//you cannot create an object of the interface 
interface Test89 //abstraction
{ 
	void m1(); //public abstract
	void m2();
}

//class Yum
//{
//	Test89 tt = new Test89();
//	
//}

class TCS implements Test89
{
	public static void main(String[] args) {
		TCS t = new TCS();  // Method-1
		t.m1();
		t.m2();
		
		Test89 tt = new TCS();  // Method-2
		tt.m1();
		tt.m2(); 
	}
	public void m1()  //we can't use just void because interface methods are public by default
	{
		System.out.println("M1 method");
	}
	
	public void m2 ()
	{
		System.out.println("M2 method");
	}
	
}

//----------------------------------------------------------------------------------------------------------------------//
abstract class TCS2 implements Test89
{
	public void m2 ()
	{
		System.out.println("M2 method");
	}
	
}

class TCS3 extends TCS2
{ 
	 public void m1()
	{
	System.out.println("M1 method");
	}
	
	public static void main(String[] args) 
	{
		TCS3 tc = new TCS3();
		tc.m1();
		tc.m2();
			
	}
}
//----------------------------------------------------------------------------------------------------------------------//
//Multiple Inheritance is possible in interface unlike classes 

interface IT
{
	void m1();
}

interface IT2 extends IT
{
	void m2();
}
interface IT3 extends IT,IT2
{
	void m3();
}

//----------------------------------------------------------------------------------------------------------------------//
//It is possible to extend a class and multiple interfaces at a time
class B{
	
}

class A extends B  implements IT, IT2
{
	public void  m1()
	{
		
	}
	public void  m2()
	{
		
	}
}

//----------------------------------------------------------------------------------------------------------------------//
//Nested interface
interface It5
{
	interface It6
	{
		void m1();
	}
}

class JavaTest implements It5.It6
{
	public void m1()
	{
		System.out.println("nested inteface method");
	}
	public static void main(String[] args) 
	{
		JavaTest jt = new JavaTest();
		jt.m1();
	}
}
//----------------------------------------------------------------------------------------------------------------------//
// Nested interface - it is possible to declare the interface in the class also
 class Ptest
 {
	 interface Test
	 {
		 int i =10;  //public static final
		 void m1();  //public abstract
	 }
 }
 
 class Stest implements Ptest.Test
 {
	 public void m1()
	 {
		 
		 System.out.println("Nested inteface ex2"+i);
	 }
	 public static void main(String[] args)
	 {
		 new Stest().m1();
	 }
 }



