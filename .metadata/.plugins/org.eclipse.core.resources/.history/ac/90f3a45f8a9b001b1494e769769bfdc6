package com.tcs;

import java.util.ArrayList;
import java.util.Collections;

public class CollectionOperations
{

	public static void main(String[] args) 
	{
		ArrayList<String> al = new ArrayList<String>();
		al.add("test");
		al.add("sachin");
		al.add("himani");
		al.add("ratan");
		System.out.println("Before sorting "+al);
		Collections.sort(al);
		System.out.println("After sorting "+al);
		
		// Scenario: we can not sort a list with different type of data type elements
		try 
		{
		ArrayList al2 = new ArrayList();
		al2.add("test");
		al2.add("sachin");
		al2.add("himani");
		al2.add("ratan");
		al2.add(10);
		
		Collections.sort(al2);
		System.out.println(al2); 
		}
		
		catch(ClassCastException e)
		{
			System.out.println("Class Cast Exception!!!!!!!!!!");
		}
		// Scenario: we can not sort a list with null value
		try 
		{
		ArrayList al3 = new ArrayList();
		al3.add("test");
		al3.add("sachin");
		al3.add("himani");
		al3.add(null);
		
		
		Collections.sort(al3);
		System.out.println(al3); 
		}
		
		catch(NullPointerException e)
		{
			System.out.println("Null pointer exception!!!!!!!!!!");
		}
		

	}

}

class Employee implements Comparable
{
	int eid;
	String ename;
	double salary;
	public Employee(int eid, String ename, double salary) 
	{
		super();
		this.eid = eid;
		this.ename = ename;
		this.salary = salary;
	}
	@Override
	public int compareTo(Object o) {
		Employee e = (Employee)o;
		if(eid>e.eid)
		{
			System.out.println(e.eid);
			return 1;
		}
		
		else if(eid==e.eid)
		{
			return 0;
		}
		
		else
		{
			return -1;
		}
	}
	
}

class Sorting 
{
	public static void main(String[] args) 
	{
		ArrayList<Employee> l = new ArrayList<Employee>();
		l.add(new Employee(12,"ratan",678.98));
		l.add(new Employee(32,"anu",578.98));
		l.add(new Employee(8,"sachin",878.8));
		
		Collections.sort(l);
		for(Employee tt: l)
		{
			System.out.println(tt.eid+" "+tt.ename+" "+tt.salary);
		}
		
	}
}































