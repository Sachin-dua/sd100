package com.tcs;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;

public class CollectionOperations
{

	public static void main(String[] args) 
	{
		ArrayList<String> al = new ArrayList<String>();
		al.add("test");
		al.add("sachin");
		al.add("himani");
		al.add("ratan");
		System.out.println("Before sorting "+al);
		Collections.sort(al);
		System.out.println("After sorting "+al);
		
		// Scenario: we can not sort a list with different type of data type elements
		try 
		{
		ArrayList al2 = new ArrayList();
		al2.add("test");
		al2.add("sachin");
		al2.add("himani");
		al2.add("ratan");
		al2.add(10);
		
		Collections.sort(al2);
		System.out.println(al2); 
		}
		
		catch(ClassCastException e)
		{
			System.out.println("Class Cast Exception!!!!!!!!!!");
		}
		// Scenario: we can not sort a list with null value
		try 
		{
		ArrayList al3 = new ArrayList();
		al3.add("test");
		al3.add("sachin");
		al3.add("himani");
		al3.add(null);
		
		
		Collections.sort(al3);
		System.out.println(al3); 
		}
		
		catch(NullPointerException e)
		{
			System.out.println("Null pointer exception!!!!!!!!!!");
		}
		

	}

}
//---------------------------------------------------------------------------------------------------------------------------//
//sorting of int data using normal class


class Employee implements Comparable
{
	int eid;
	String ename;
	double salary;
	public Employee(int eid, String ename, double salary) 
	{
		super();
		this.eid = eid;
		this.ename = ename;
		this.salary = salary;
	}
	@Override
	public int compareTo(Object o) {
		Employee e = (Employee)o;
		if(eid>e.eid)
		{
			System.out.println(e.eid);
			return 1;
		}
		
		else if(eid==e.eid)
		{
			return 0;
		}
		
		else
		{
			return -1;
		}
	}
	
}


class Sorting 
{
	public static void main(String[] args) 
	{
		ArrayList<Employee> l = new ArrayList<Employee>();
		l.add(new Employee(12,"ratan",678.98));
		l.add(new Employee(32,"anu",578.98));
		l.add(new Employee(8,"sachin",878.8));
		
		Collections.sort(l);
		for(Employee tt: l)
		{
			System.out.println(tt.eid+" "+tt.ename+" "+tt.salary);
		}
		
	}
}
//---------------------------------------------------------------------------------------------------------------------------//
// sorting of String data using generic class

class StudentTest implements Comparable<StudentTest>  //used the generic class
{
	int sid;
	String name;
	
	StudentTest(int sid,String name){
		this.sid = sid;
		this.name= name;
	}
	
	public int compareTo(StudentTest s)  // no need to type cast
	{
		return name.compareTo(s.name);
		
	}
}

class Teacher 
{
	public static void main(String[] args) 
	{
		ArrayList<StudentTest> li = new ArrayList<StudentTest>();
		li.add(new StudentTest(45,"zebra"));
		li.add(new StudentTest(78,"uma"));
		
		Collections.sort(li);
		
		for(StudentTest s:li)
		{
			System.out.println(s.sid+" "+s.name);
		}
		
	}
}
//---------------------------------------------------------------------------------------------------------------------------//
//sorting of Wrapper class data using generic class

class ClientTest implements Comparable<ClientTest>  //used the generic class
{
	Integer sid;
	String name;
	
	ClientTest(int sid,String name){
		this.sid = sid;
		this.name= name;
	}
	
	public int compareTo(ClientTest s)  // no need to type cast
	{
		return -sid.compareTo(s.sid); //use -ve sign for the descending order 
		
	}
}

class TCSTest 
{
	public static void main(String[] args) 
	{
		ArrayList<ClientTest> li = new ArrayList<ClientTest>();
		li.add(new ClientTest(45,"zebra"));
		li.add(new ClientTest(78,"uma"));
		
		Collections.sort(li);
		
		for(ClientTest s:li)
		{
			System.out.println(s.sid+" "+s.name);
		}
		
	}
}
//---------------------------------------------------------------------------------------------------------------------------//
class CSE implements Comparator<Emp>
{

	@Override
	public int compare(Emp e1, Emp e2) 
	{
		if(e1.eid>e2.eid)
		{
		return 1;
		}
		
		if(e1.eid==e2.eid)
		{
		return 0;
		}
		
		else
		{
			return -1;
		}
		
	}
	
}
class ME 
{
	public static void main(String[] args) 
	{
		ArrayList<Emp> al=  new ArrayList<Emp>();
		al.add(new Emp(31,"sachin"));
		al.add(new Emp(11,"himani"));
		
		Collections.sort(al,new CSE());
		
		for(Emp ee:al)
		{
			System.out.println(ee.eid+" "+ee.ename);
		}
	}
}
























